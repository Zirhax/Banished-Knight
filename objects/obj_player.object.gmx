<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
vspd = 0;
hSpd = global.horSpd;
jspd = 30;
grav = 1;

dead = false;

image_speed = 0.25;

slowReady = true;
showReady = false;

doubleJump = true;
nrOfJumps = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to menu
global.coins += global.points/1000;
round(global.coins);
global.points = 0;
scr_savegame();
room_restart();
room_goto(rm_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping
if(!dead)
{
    var jump = keyboard_check_pressed(vk_space);
    if(place_meeting(x, y+1, obj_solid))
    {
        vspd = 0;
        nrOfJumps = 0;
        doubleJump = true;
    }
    else
    {
        if(vspd &lt; 20)
        {
            vspd += grav;
        }
    }
      
    if(jump &amp;&amp; doubleJump)
    {
        nrOfJumps++;
        vspd = -jspd;
        audio_play_sound(snd_jump, 1, 0);
        if(nrOfJumps &gt;= global.allowedJumps)
        {
            doubleJump = false;
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving left/right
var left = keyboard_check(vk_left) || keyboard_check(ord('A'));
var right = keyboard_check(vk_right) || keyboard_check(ord('D'));

if(left)
{
    x -= hSpd;
}

if(right)
{
    x += hSpd;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
//Horizontal Collision
if(place_meeting(x + global.currSpd, y, obj_solid))
{
    if(place_meeting(x + global.currSpd, y - 20, obj_solid))
    {
        dead = true;
    }
    else
    {
        obj_player.y -= 20;
    }
}

//Vertical Collision
if(place_meeting(x, y+vspd, obj_solid))
{
    while(!place_meeting(x, y+sign(vspd), obj_solid))
    {
        y+= sign(vspd);
    }
    vspd = 0;
}

y += vspd;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if outside room
if(y &gt; room_height + sprite_height*2)
{
    dead = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if dead and give points
if(dead == true &amp;&amp; alarm[0] &lt; 0)
{
    instance_create(x, y, obj_player_dead);
    //Check for death animation
    if(place_meeting(x + global.currSpd, y, obj_obstacle))
    {
        with(obj_obstacle)
        {
            if(global.currentLevel == rm_level1)
            {
                sprite_index = spr_obstacle_level1_death;
            }
            if(global.currentLevel == rm_level2)
            {
                sprite_index = spr_obstacle_level2_death;
            }
        }
    }
    image_alpha = 0;
    alarm[0] = room_speed * 3;
    global.currSpd = 0;
    vspd = 0;
}
else
{
    global.points += global.currSpd/2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if next level
if(global.points &gt;= 35000)
{
    global.currentLevel = rm_level2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw points and cooldown
draw_text(room_width/2, 50, "Points: " + string(global.points));

if(alarm[0] &gt; 0)
{
    draw_set_font(fnt_dead);
    draw_text(room_width/4, room_height/2, "You died...");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
